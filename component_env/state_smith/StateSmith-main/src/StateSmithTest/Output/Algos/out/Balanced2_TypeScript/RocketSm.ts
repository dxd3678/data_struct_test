// Autogenerated with StateSmith.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

export enum EventId
{
    DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
}

export const EventIdCount: number = 1;

export enum StateId
{
    ROOT = 0,
    GROUP = 1,
    G1 = 2,
    G2 = 3,
}

export const StateIdCount: number = 4;

// Generated state machine
export class RocketSm
{
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    public stateId: StateId;
    
    // State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
    public RocketSm()
    {
    }
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    public start(): void 
    {
        this.ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(group)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `group`.
                this.GROUP_enter();
                
                // group.<InitialState> behavior
                // uml: TransitionTo(g1)
                {
                    // Step 1: Exit states until we reach `group` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: ``.
                    
                    // Step 3: Enter/move towards transition target `g1`.
                    this.G1_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for group.<InitialState>
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    public dispatchEvent(eventId: EventId): void 
    {
        
        switch (this.stateId)
        {
            // STATE: RocketSm
            case StateId.ROOT:
                // state and ancestors have no handler for `do` event.
                break;
            
            // STATE: group
            case StateId.GROUP:
                // state and ancestors have no handler for `do` event.
                break;
            
            // STATE: g1
            case StateId.G1:
                this.G1_do(); 
                break;
            
            // STATE: g2
            case StateId.G2:
                this.G2_do(); 
                break;
        }
        
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    private exitUpToStateHandler(desiredState: StateId): void 
    {
        while (this.stateId != desiredState)
        {
            switch (this.stateId)
            {
                case StateId.GROUP: this.GROUP_exit(); break;
                
                case StateId.G1: this.G1_exit(); break;
                
                case StateId.G2: this.G2_exit(); break;
                
                default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
            }
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    private ROOT_enter(): void 
    {
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state GROUP
    ////////////////////////////////////////////////////////////////////////////////
    
    private GROUP_enter(): void 
    {
        this.stateId = StateId.GROUP;
    }
    
    private GROUP_exit(): void 
    {
        this.stateId = StateId.ROOT;
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state G1
    ////////////////////////////////////////////////////////////////////////////////
    
    private G1_enter(): void 
    {
        this.stateId = StateId.G1;
    }
    
    private G1_exit(): void 
    {
        this.stateId = StateId.GROUP;
    }
    
    private G1_do(): void 
    {
        // g1 behavior
        // uml: do TransitionTo(g2)
        {
            // Step 1: Exit states until we reach `group` state (Least Common Ancestor for transition).
            this.G1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `g2`.
            this.G2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for g1
        
        // No ancestor handles this event.
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state G2
    ////////////////////////////////////////////////////////////////////////////////
    
    private G2_enter(): void 
    {
        this.stateId = StateId.G2;
    }
    
    private G2_exit(): void 
    {
        this.stateId = StateId.GROUP;
    }
    
    private G2_do(): void 
    {
        // g2 behavior
        // uml: do [x > 50] TransitionTo(g1)
        if (x > 50)
        {
            // Step 1: Exit states until we reach `group` state (Least Common Ancestor for transition).
            this.G2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `g1`.
            this.G1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for g2
        
        // No ancestor handles this event.
    }
    
    // Thread safe.
    public static stateIdToString(id: StateId): string 
    {
        switch (id)
        {
            case StateId.ROOT: return "ROOT";
            case StateId.GROUP: return "GROUP";
            case StateId.G1: return "G1";
            case StateId.G2: return "G2";
            default: return "?";
        }
    }
    
    // Thread safe.
    public static eventIdToString(id: EventId): string 
    {
        switch (id)
        {
            case EventId.DO: return "DO";
            default: return "?";
        }
    }
}

// Autogenerated with StateSmith.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class RocketSm
{
function userCodeMethod() {
    console.log('userCodeMethod');
}

    static EventId = 
    {
        EV1 : 0,
        EV2 : 1,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 2;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        GROUP : 1,
        G1 : 2,
        G2 : 3,
        S1 : 4,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 5;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(RocketSm.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.<InitialState>)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
            // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.<InitialState> behavior
            // uml: TransitionTo(group)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `group`.
                this.#GROUP_enter();
                
                // group.<InitialState> behavior
                // uml: TransitionTo(g1)
                {
                    // Step 1: Exit states until we reach `group` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: ``.
                    
                    // Step 3: Enter/move towards transition target `g1`.
                    this.#G1_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    this.stateId = RocketSm.StateId.G1;
                    // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                    return;
                } // end of behavior for group.<InitialState>
            } // end of behavior for ROOT.<InitialState>
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    // Note! This function assumes that the `eventId` parameter is valid.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    #ROOT_exit()
    {
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state GROUP
    ////////////////////////////////////////////////////////////////////////////////
    
    #GROUP_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#GROUP_exit;
        this.#currentEventHandlers[RocketSm.EventId.EV1] = this.#GROUP_ev1;
    }
    
    #GROUP_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[RocketSm.EventId.EV1] = null;  // no ancestor listens to this event
    }
    
    #GROUP_ev1()
    {
        // No ancestor state handles `ev1` event.
        
        // group behavior
        // uml: EV1 TransitionTo(s1)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#exitUpToStateHandler(this.#ROOT_exit);
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `s1`.
            this.#S1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = RocketSm.StateId.S1;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for group
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state G1
    ////////////////////////////////////////////////////////////////////////////////
    
    #G1_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#G1_exit;
        this.#currentEventHandlers[RocketSm.EventId.EV1] = this.#G1_ev1;
    }
    
    #G1_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#GROUP_exit;
        this.#currentEventHandlers[RocketSm.EventId.EV1] = this.#GROUP_ev1;  // the next ancestor that handles this event is GROUP
    }
    
    #G1_ev1()
    {
        // Setup handler for next ancestor that listens to `ev1` event.
        this.#ancestorEventHandler = this.#GROUP_ev1;
        
        // g1 behavior
        // uml: EV1 [a > 20] TransitionTo(g2)
        if (a > 20)
        {
            // Step 1: Exit states until we reach `group` state (Least Common Ancestor for transition).
            this.#G1_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `g2`.
            this.#G2_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = RocketSm.StateId.G2;
            this.#ancestorEventHandler = null;
            return;
        } // end of behavior for g1
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state G2
    ////////////////////////////////////////////////////////////////////////////////
    
    #G2_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#G2_exit;
        this.#currentEventHandlers[RocketSm.EventId.EV2] = this.#G2_ev2;
    }
    
    #G2_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#GROUP_exit;
        this.#currentEventHandlers[RocketSm.EventId.EV2] = null;  // no ancestor listens to this event
    }
    
    #G2_ev2()
    {
        // No ancestor state handles `ev2` event.
        
        // g2 behavior
        // uml: EV2 TransitionTo(g1)
        {
            // Step 1: Exit states until we reach `group` state (Least Common Ancestor for transition).
            this.#G2_exit();
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `g1`.
            this.#G1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = RocketSm.StateId.G1;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for g2
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state S1
    ////////////////////////////////////////////////////////////////////////////////
    
    #S1_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#S1_exit;
    }
    
    #S1_exit()
    {
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case RocketSm.StateId.ROOT: return "ROOT";
            case RocketSm.StateId.GROUP: return "GROUP";
            case RocketSm.StateId.G1: return "G1";
            case RocketSm.StateId.G2: return "G2";
            case RocketSm.StateId.S1: return "S1";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case RocketSm.EventId.EV1: return "EV1";
            case RocketSm.EventId.EV2: return "EV2";
            default: return "?";
        }
    }
}

// Autogenerated with StateSmith.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

public class ____GilData_FileTop { }
// Generated state machine
public class Spec1bSm
{
public enum EventId
{
    T1 = 0,
}

public const int EventIdCount = 1;

public enum StateId
{
    ROOT = 0,
    S = 1,
    S1 = 2,
    S1_1 = 3,
    S2 = 4,
    S2_1 = 5,
}

public const int StateIdCount = 6;

    // Used internally by state machine. Feel free to inspect, but don't modify.
    public StateId state_id;

// State machine variables. Can be used for inputs, outputs, user variables...
public struct Vars
{
    public string ____GilData_FieldEchoStringVoid0;//"uint8_t count;"
}
    
    // Variables. Can be used for inputs, outputs, user variables...
    public Vars vars = new Vars();

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
public Spec1bSm()
{
}

// Starts the state machine. Must be called before dispatching events. Not thread safe.
public void start()
{
    this.ROOT_enter();
    // ROOT behavior
    // uml: TransitionTo(ROOT.<InitialState>)
    {
        // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
        
        // Step 2: Transition action: ``.
        
        // Step 3: Enter/move towards transition target `ROOT.<InitialState>`.
        // ROOT.<InitialState> is a pseudo state and cannot have an `enter` trigger.
        
        // ROOT.<InitialState> behavior
        // uml: TransitionTo(S)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `S`.
            this.S_enter();
            
            // S.<InitialState> behavior
            // uml: TransitionTo(S1)
            {
                // Step 1: Exit states until we reach `S` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: ``.
                
                // Step 3: Enter/move towards transition target `S1`.
                this.S1_enter();
                
                // S1.<InitialState> behavior
                // uml: TransitionTo(S1_1)
                {
                    // Step 1: Exit states until we reach `S1` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                    
                    // Step 2: Transition action: ``.
                    
                    // Step 3: Enter/move towards transition target `S1_1`.
                    this.S1_1_enter();
                    
                    // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                    return;
                } // end of behavior for S1.<InitialState>
            } // end of behavior for S.<InitialState>
        } // end of behavior for ROOT.<InitialState>
    } // end of behavior for ROOT
}

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
public void dispatch_event(EventId event_id)
{
    // This state machine design only has a single event type so we can safely assume
    // that the dispatched event is `t1` without checking the `event_id` parameter.
    ____GilData_UnusedVar(event_id); // This line prevents an 'unused variable' compiler warning
    
    switch (this.state_id)
    {
        // STATE: Spec1bSm
        case StateId.ROOT:
            // state and ancestors have no handler for `t1` event.
            break;
        
        // STATE: S
        case StateId.S:
            // state and ancestors have no handler for `t1` event.
            break;
        
        // STATE: S1
        case StateId.S1:
            this.S1_t1(); 
            break;
        
        // STATE: S1_1
        case StateId.S1_1:
            this.S1_t1();  // First ancestor handler for this event

            break;
        
        // STATE: S2
        case StateId.S2:
            // state and ancestors have no handler for `t1` event.
            break;
        
        // STATE: S2_1
        case StateId.S2_1:
            // state and ancestors have no handler for `t1` event.
            break;
    }
    
}

// This function is used when StateSmith doesn't know what the active leaf state is at
// compile time due to sub states or when multiple states need to be exited.
private void exit_up_to_state_handler(StateId desired_state)
{
    while (this.state_id != desired_state)
    {
        switch (this.state_id)
        {
            case StateId.S: this.S_exit(); break;
            
            case StateId.S1: this.S1_exit(); break;
            
            case StateId.S1_1: this.S1_1_exit(); break;
            
            case StateId.S2: this.S2_exit(); break;
            
            case StateId.S2_1: this.S2_1_exit(); break;
            
            default: return;  // Just to be safe. Prevents infinite loop if state ID memory is somehow corrupted.
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state ROOT
////////////////////////////////////////////////////////////////////////////////

private void ROOT_enter()
{
    this.state_id = StateId.ROOT;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state S
////////////////////////////////////////////////////////////////////////////////

private void S_enter()
{
    this.state_id = StateId.S;
}

private void S_exit()
{
    this.state_id = StateId.ROOT;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state S1
////////////////////////////////////////////////////////////////////////////////

private void S1_enter()
{
    this.state_id = StateId.S1;
}

private void S1_exit()
{
    // S1 behavior
    // uml: exit / { b(); }
    {
        // Step 1: execute action `b();`
        ____GilData_EchoStringVoid("print(\"b(); \");");
    } // end of behavior for S1
    
    this.state_id = StateId.S;
}

private void S1_t1()
{
    // S1 behavior
    // uml: T1 [g()] / { t(); } TransitionTo(S2)
    if (____GilData_VarArgsToBool(____GilData_EchoStringBool("print(\"g() \")")))
    {
        // Step 1: Exit states until we reach `S` state (Least Common Ancestor for transition).
        this.exit_up_to_state_handler(StateId.S);
        
        // Step 2: Transition action: `t();`.
        ____GilData_EchoStringVoid("print(\"t(); \");");
        
        // Step 3: Enter/move towards transition target `S2`.
        this.S2_enter();
        
        // S2.<InitialState> behavior
        // uml: / { d(); } TransitionTo(S2_1)
        {
            // Step 1: Exit states until we reach `S2` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: `d();`.
            ____GilData_EchoStringVoid("print(\"d(); \");");
            
            // Step 3: Enter/move towards transition target `S2_1`.
            this.S2_1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            return;
        } // end of behavior for S2.<InitialState>
    } // end of behavior for S1
    
    // No ancestor handles this event.
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state S1_1
////////////////////////////////////////////////////////////////////////////////

private void S1_1_enter()
{
    this.state_id = StateId.S1_1;
}

private void S1_1_exit()
{
    // S1_1 behavior
    // uml: exit / { a(); }
    {
        // Step 1: execute action `a();`
        ____GilData_EchoStringVoid("print(\"a(); \");");
    } // end of behavior for S1_1
    
    this.state_id = StateId.S1;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state S2
////////////////////////////////////////////////////////////////////////////////

private void S2_enter()
{
    this.state_id = StateId.S2;
    
    // S2 behavior
    // uml: enter / { c(); }
    {
        // Step 1: execute action `c();`
        ____GilData_EchoStringVoid("print(\"c(); \");");
    } // end of behavior for S2
}

private void S2_exit()
{
    this.state_id = StateId.S;
}


////////////////////////////////////////////////////////////////////////////////
// event handlers for state S2_1
////////////////////////////////////////////////////////////////////////////////

private void S2_1_enter()
{
    this.state_id = StateId.S2_1;
    
    // S2_1 behavior
    // uml: enter / { e(); }
    {
        // Step 1: execute action `e();`
        ____GilData_EchoStringVoid("print(\"e(); \");");
    } // end of behavior for S2_1
}

private void S2_1_exit()
{
    this.state_id = StateId.S2;
}

// Thread safe.
public static string state_id_to_string(StateId id)
{
    switch (id)
    {
        case StateId.ROOT: return "ROOT";
        case StateId.S: return "S";
        case StateId.S1: return "S1";
        case StateId.S1_1: return "S1_1";
        case StateId.S2: return "S2";
        case StateId.S2_1: return "S2_1";
        default: return "?";
    }
}

// Thread safe.
public static string event_id_to_string(EventId id)
{
    switch (id)
    {
        case EventId.T1: return "T1";
        default: return "?";
    }
}

    public static bool ____GilData_EchoStringBool(string toEcho) { return true; }
    public static void ____GilData_EchoStringVoid(string toEcho) { }
    public static bool ____GilData_VarArgsToBool(params object[] args) { return true; }
    public static void ____GilData_UnusedVar(object unusedVar) { }
}

// Autogenerated with StateSmith 0.9.4-alpha-fix-1.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once
#include <stdint.h>

// any text you put in IRenderConfigC.HFileIncludes (like this comment) will be written to the generated .h file
typedef enum blinky1_printf_sm_event_id_t {
  BLINKY1_PRINTF_SM_EVENT_ID_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
} blinky1_printf_sm_event_id_t;

enum
{
    BLINKY1_PRINTF_SM_EVENT_ID_COUNT = 1
};

typedef enum blinky1_printf_sm_state_id_t {
  BLINKY1_PRINTF_SM_STATE_ID_ROOT = 0,
  BLINKY1_PRINTF_SM_STATE_ID_LED_OFF = 1,
  BLINKY1_PRINTF_SM_STATE_ID_LED_ON = 2,
} blinky1_printf_sm_state_id_t;

enum
{
    BLINKY1_PRINTF_SM_STATE_ID_COUNT = 3
};


// Generated state machine
// forward declaration
typedef struct blinky1_printf_sm blinky1_printf_sm;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct blinky1_printf_sm_Vars {
  uint32_t timer_started_at_ms;  // milliseconds
} blinky1_printf_sm_Vars;


// event handler type
typedef void (*blinky1_printf_sm_func_t)(blinky1_printf_sm* sm);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void blinky1_printf_sm_ctor(blinky1_printf_sm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void blinky1_printf_sm_start(blinky1_printf_sm* sm);

// Dispatches an event to the state machine. Not thread safe.
void blinky1_printf_sm_dispatch_event(blinky1_printf_sm* sm, blinky1_printf_sm_event_id_t event_id);

// Thread safe.
char const * blinky1_printf_sm_state_id_to_string(blinky1_printf_sm_state_id_t id);

// Thread safe.
char const * blinky1_printf_sm_event_id_to_string(blinky1_printf_sm_event_id_t id);

// Generated state machine
struct blinky1_printf_sm {
  // Used internally by state machine. Feel free to inspect, but don't modify.
  blinky1_printf_sm_state_id_t state_id;
  
  // Used internally by state machine. Don't modify.
  blinky1_printf_sm_func_t ancestor_event_handler;
  
  // Used internally by state machine. Don't modify.
  blinky1_printf_sm_func_t current_event_handlers[BLINKY1_PRINTF_SM_EVENT_ID_COUNT];
  
  // Used internally by state machine. Don't modify.
  blinky1_printf_sm_func_t current_state_exit_handler;
  
  // Variables. Can be used for inputs, outputs, user variables...
  blinky1_printf_sm_Vars vars;
};


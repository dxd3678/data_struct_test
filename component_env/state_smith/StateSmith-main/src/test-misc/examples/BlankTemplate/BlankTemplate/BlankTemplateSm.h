// Autogenerated with StateSmith 0.9.4-alpha-fix-1.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

#pragma once
#include <stdint.h>

// my H File Includes at the top
typedef enum BlankTemplateSm_EventId
{
    BlankTemplateSm_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
} BlankTemplateSm_EventId;

enum
{
    BlankTemplateSm_EventIdCount = 1
};

typedef enum BlankTemplateSm_StateId
{
    BlankTemplateSm_StateId_ROOT = 0,
    BlankTemplateSm_StateId_STATE_1 = 1,
    BlankTemplateSm_StateId_STATE_2 = 2,
} BlankTemplateSm_StateId;

enum
{
    BlankTemplateSm_StateIdCount = 3
};


// Generated state machine
// forward declaration
typedef struct BlankTemplateSm BlankTemplateSm;

// event handler type
typedef void (*BlankTemplateSm_Func)(BlankTemplateSm* sm);

// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void BlankTemplateSm_ctor(BlankTemplateSm* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void BlankTemplateSm_start(BlankTemplateSm* sm);

// Dispatches an event to the state machine. Not thread safe.
void BlankTemplateSm_dispatch_event(BlankTemplateSm* sm, BlankTemplateSm_EventId event_id);

// Thread safe.
char const * BlankTemplateSm_state_id_to_string(BlankTemplateSm_StateId id);

// Thread safe.
char const * BlankTemplateSm_event_id_to_string(BlankTemplateSm_EventId id);

// Generated state machine
struct BlankTemplateSm
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    BlankTemplateSm_StateId state_id;
    
    // Used internally by state machine. Don't modify.
    BlankTemplateSm_Func ancestor_event_handler;
    
    // Used internally by state machine. Don't modify.
    BlankTemplateSm_Func current_event_handlers[BlankTemplateSm_EventIdCount];
    
    // Used internally by state machine. Don't modify.
    BlankTemplateSm_Func current_state_exit_handler;
};


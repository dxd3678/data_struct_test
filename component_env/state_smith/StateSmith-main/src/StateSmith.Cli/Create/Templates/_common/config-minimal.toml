[RenderConfig]
FileTop = """
    // Whatever you put in this `FileTop` section will end up 
    // being printed at the top of every generated code file.
    // You can use this section for imports:                //!!<line-filter:JavaScript,TypeScript>
    // import { SomeUserThing } from "./SomeUserThing.js";  //!!<line-filter:JavaScript>
    // import { SomeUserThing } from "./SomeUserThing";     //!!<line-filter:TypeScript>
    """

//!!<filter:C,CppC>
AutoExpandedVars = """
    uint16_t count; // this var can be referenced in diagram
    """

[RenderConfig.C]
# CFileExtension = ".inc" # if you want to include sm in another file
CFileExtension = ".cpp" //!!<line-filter:CppC>
HFileExtension = ".hpp" //!!<line-filter:CppC>
HFileIncludes = """
    #include <stdint.h> // for count var
    """
CFileIncludes = """
    // #include "your_header_here.h"
    """
# IncludeGuardLabel = "{FILENAME}_H"

# More C settings are available. See docs.

//!!</filter>




//!!<filter:Cpp>
AutoExpandedVars = """
    uint16_t count; // this var can be referenced in diagram
    """

[RenderConfig.Cpp]
# HFileExtension = ".h"
# IncludeGuardLabel = "{FILENAME}_H"
# NameSpace = "MyNamespace"
# BaseClassCode = "public MyUserBaseClass"
HFileIncludes = """
    #include <stdint.h> // for count var
    """
CFileIncludes = """
    // #include "your_header_here.h"
    """

# More Cpp settings are available. See docs.

//!!</filter>





//!!<filter:CSharp>
AutoExpandedVars = """
    int count; // this var can be referenced in diagram
    """

[RenderConfig.CSharp]
# NameSpace = ""
# Usings = ""
# BaseList = "MyUserBaseClass, IMyOtherUserInterface"
# UseNullable = false
# UsePartialClass = false

# More CSharp settings are available. See docs.

//!!</filter>





//!!<filter:JavaScript>
AutoExpandedVars = """
    count: 0, // this var can be referenced in diagram
    """

[RenderConfig.JavaScript]
# ExtendsSuperClass = "MyUserBaseClass"
# UseExportOnClass = true

# More JavaScript settings are available. See docs.

//!!</filter>






//!!<filter:TypeScript>
# TypeScript auto expanded var fields must end with a semicolon
AutoExpandedVars = """
    public count: number = 0; // this var can be referenced in diagram
    """

[RenderConfig.TypeScript]
# Extends = "SomeUserBaseClass"
# Implements = "SomeUserDefinedInterface"

# More TypeScript settings are available. See docs.

//!!</filter>





//!!<filter:Java>
AutoExpandedVars = """
    int count = 0; // this var can be referenced in diagram
    """

[RenderConfig.Java]
# Package = "my.package.for.statemachine"
Imports = """
    // whatever you need to import here
    """
# Extends = "MyUserBaseClass"
# Implements = "SomeUserInterface"

# More Java settings are available. See docs.

//!!</filter>





//!!<filter:Python>
AutoExpandedVars = """
    self.count = 0  # this var can be referenced in diagram
    """

[RenderConfig.Python]
Imports = """
    # whatever you need to import
    # from some_module import some_function
    """
Extends = "MyUserBaseClass"
ClassCode = """
    # Add custom code here to inject into the generated class.
    # Inheritance or composition might be a better choice.
    """

//!!</filter>




[SmRunnerSettings]
transpilerId = "C99"  //!!<line-filter:C,CppC>
transpilerId = "Cpp"  //!!<line-filter:Cpp>
transpilerId = "CSharp"  //!!<line-filter:CSharp>
transpilerId = "JavaScript"  //!!<line-filter:JavaScript>
transpilerId = "TypeScript"  //!!<line-filter:TypeScript>
transpilerId = "Java"  //!!<line-filter:Java>
transpilerId = "Python"  //!!<line-filter:Python>